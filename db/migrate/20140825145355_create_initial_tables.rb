class CreateInitialTables < ActiveRecord::Migration
  def change
    #based on our yaml files, rake names the db:create db after what that is named in yaml
    # we don't need to add ID primary key, active record adds it for us
    #after you make your intital tables, run rake db:migrate, makes scehma file for you
    #if you need to make a new table or add a a column, rake db:create_migration NAME=create_initial_tables(different name here, ie, add_new_column) then go to that .rb file it made, add new table, columns, whatever, then run rake db:migrate 
    # ActiveRecord adds the ID column and sets it as the primary key automatically.
    
        # Important rules:
        #
        # 1. Never edit a migration after it's been run via `rake db:migrate`. ^see above
        # 2. Never edit db/schema.rb directly.
        # 3. Never edit table structure via the DB console.
      
        # http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column
    #
    #if you need to add a new column to an existing table, again, do not edit this file once you've migrated and the schema is created. Run the rake db:create_migration as seen above, then look at link below for documentation on how to add a column to an existing table, in the "available transformations" section
    #     http://api.rubyonrails.org/classes/ActiveRecord/Migration.html
    
    create_table :users do |t|
      t.text :name
    end
    
    create_table :trails do |t|
      t.text :trail_name
    end
    
    create_table :reviews do |t|
      t.text :content
      t.integer :trail_id
      t.integer :user_id
    end
    
    create_table :trails_users do |t|
      t.integer :trail_id
      t.integer :user_id
    end
  end
end
